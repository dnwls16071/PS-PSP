# 지도개발팀에서 근무하는 제이지는 지도에서 도시 이름을 검색하면 해당 도시와 관련된 맛집 게시물들을 데이터베이스에서 읽어 보여주는 서비스를 개발하고 있다.
# 이 프로그램의 테스팅 업무를 담당하고 있는 어피치는 서비스를 오픈하기 전 각 로직에 대한 성능 측정을 수행하였는데, 제이지가 작성한 부분 중 데이터베이스에서 게시물을 가져오는 부분의 실행시간이 너무 오래 걸린다는 것을 알게 되었다.
# 어피치는 제이지에게 해당 로직을 개선하라고 닦달하기 시작하였고, 제이지는 DB 캐시를 적용하여 성능 개선을 시도하고 있지만 캐시 크기를 얼마로 해야 효율적인지 몰라 난감한 상황이다.
#
# 어피치에게 시달리는 제이지를 도와, DB 캐시를 적용할 때 캐시 크기에 따른 실행시간 측정 프로그램을 작성하시오.
#
# 캐시 크기(cacheSize)와 도시이름 배열(cities)을 입력받는다.
# cacheSize는 정수이며, 범위는 0 ≦ cacheSize ≦ 30 이다.
# cities는 도시 이름으로 이뤄진 문자열 배열로, 최대 도시 수는 100,000개이다.
# 각 도시 이름은 공백, 숫자, 특수문자 등이 없는 영문자로 구성되며, 대소문자 구분을 하지 않는다. 도시 이름은 최대 20자로 이루어져 있다

def solution(cacheSize, cities):
    cache = []
    answer = 0
    if cacheSize == 0:
        return len(cities) * 5
    for i in cities:
        i = i.lower()
        if i in cache:  # 만약 캐시 안에 값이 있다면?
            cache.remove(i) # cache에 값 추가
            cache.insert(len(cities) - 1,i)
            answer += 1 # cache hit일 경우 실행시간은 1만큼 추가
        else:   # 만약 캐시 안에 값이 없다면?
            if len(cache) >= cacheSize: # 근데 만약 캐시의 길이가 캐시사이즈 이상이라면?
                cache.pop(0)
            cache.append(i)
            answer += 5
    return answer

# 위 문제는 2018 KAKAO BLIND RECRUITMENT에서 출제된 문제였다.
# 캐시에 대한 이해가 있었다면 문제를 훨씬 쉽게 풀 수 있어서 난이도는 낮은 것으로 보여진다.

# 각 도시 이름은 공백, 숫자, 특수문자 등이 없는 영문자로 구성되며, 대소문자는 구분을 하지 않는다고 했으므로 lower()를 통해서 소문자로 변환해준다.
# 만약 cache_size = 0이라면  cache hit가 발생할 수 없으므로 cache miss의 값인 5를 배열의 길이만큼 곱해서 리턴한다.

# 캐시에 대해서 공부하면서 LRU(Least Recently Used) 페이지 교체 알고리즘도 공부했다.
# 예를 들어 cache_size = 4이고 사이즈가 4인 배열에서 새로운 값을 넣으려고 하면 배열의 맨 앞에 있는 가장 오래된 값을 제거하고 새로운 값을 넣습니다.

